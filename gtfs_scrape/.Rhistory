# R's distinctive data type is the data frame
height = c(8, 15, 20, 60, 50, 40)
circ = c(8, 12, 14, 14, 15, 8)
type = c("Poplar", "Ash", "Oak", "Oak", "Ash","Oak")
df = data.frame(height, circ, type)
print(df)
summary(df)
df[,'height']
stdDev <- sd(df[,'height'])
tree.freq = table(df$type)
barplot(tree.freq)
plot(df$height, df$circ)
abline(lm(df$circ~df$height), col="red")
lines(lowess(df$height,df$circ))
help("barplot")
tree.freq = table(df$type)
barplot(tree.freq, main = "Trees Trees more Trees")
install.packages("sp")
install.packages("maptools")
install.packages("geojsonio")
median(78.83, 80.37)
80.37 - 78.83
1.54/2
78.83 + .77
x = 1
x
x = 2
x
s = 7
x + s
z = "hello world"
z
t = "hi rob"
paste(z, t, " ")
z = "hello world"
z
t = "hi rob"
paste(z, t, sep = " ")
x==s
x!=s
!x==s
str(z)
class(z)
class(s)
x = factor(x('a', 'b', 'c'))
x = factor(c('a', 'b', 'c'))
x
x = ordered(c(1,2,4,3))
x
class(x)
x = c(1,2,5,11111)
x = c(1,2,5,11111)
y = ordered(x)
y
keanu = rbind(c(1,2), c(3,4))
keanu
keanu2 = cbind(c(1,2), c(3,4))
keanu2
keanu[1,2]
keanu[1,]
install.packages("gapminder")
library(gapminder)
view(gapminder)
View(gapminder)
head(gapminder)
str(gapminder)
summary(gapminder)
gapminder$year2 = as.factor(gapminder$year)
summary(gapminder)
source('~/.active-rstudio-document', echo=TRUE)
gapminder[gapminder$country=="Australia"&
gapminder$year >= 1992,]
summary(gapminder[gapminder$country=="Australia"&
gapminder$year >= 1992,])
Australia = gapminder[gapminder$country=="Australia"&
gapminder$year >= 1992,]
summary(Australia)
var(Australia$lifeExp)*(3/4)
install.packages("tidyverse")
library(tidyverse)
library(installr)
install.packages(installr)
install.packages("installr")
library(installr)
vignette()
vignette("introduction")
vignette("introduction to dplyr")
first_vector = c(1,2,3)
first_vector
typeof(first_vector)
length(first_vector)
char_vect = c("Pugh", "Johnston", "Morgan")
typeof(char_vect)
a = 1:4
a
num_seq = 1:4
num_seq
seq_func = rep(1, times=2)
seq_func
seq_func2
seq_func2 = rep("ha" times=3)
seq_func2 = rep("ha", times=3)
seq_func2
rep_func = rep(1, times=2)
rep_func2 = rep("ha", times=3)
rep_func2
seq_func = seq(1,10,2)
seq_func
rep_seq_nest = rep(seq(1,12,3), times=3)
rep_seq_nest
c(1,2,3) + 1
c(1,2,3,4,5,6) + c(1,2)
c(1,2,3) < 2
c(2,3,4) + c(10, 20)
c(2,3,4) + c(10, 20)
vect2 = seq(1,20,3)
vect2[3]
vect[seq(1,5)]
vect2[seq(1,5)]
vect2[c(2,5,6)]
scores <- c(John=25, Marge=34, Dan=24, Emily=29)
scores[c("John", "Emily")]
scores[c(FALSE, TRUE, TRUE, FALSE)]
scores < 30
scores[scores<30]
mylist <- list(1.1, c(1L,3L,7L), c("abc", "def"))
mylist
mary_info <- list(classes=c("Biology", "Math", "Music",
"Physics"),
friends=c("John", "Dan", "Emily"),
SAT=1450)
mary_info
mary_info[[2]]
mary_info$SAT
mary_info$friends[2]
a
matrix1 <- matrix(1:6, nrow=2)
matrix1
matrix1 <- matrix(1:6, nrow=2)
matrix1
matrix2 <- matrix(5:14, nrow=2, byrow=TRUE)
matrix2
matrix1[2,3]
matrix2[,2]
matrix2[1,]
mydata <- data.frame(diabetic = c(TRUE, FALSE, TRUE, FALSE),
height = c(65, 69, 71, 73))
mydata
mydata[3,2]
mydata[,"diabetic"]
mydata$height[2:3]
mydata[["height"]]
mydata[["height"]][2]
colnames(mydata)
colnames(mydata) <- c("Diabetic", "Height")
colnames(mydata)
colnames(mydata)[1] <- "Diabetes"
colnames(mydata)
dim(mydata)
str(mydata)
setwd("/Users/abob/Documents/MCP/Spring 2018/Gentrification Mapping Work/Map_comparison")
# Read in ACS data and ma outcome data
acs = read.dbf("ACS_With_Tracts/Tracts_With_ACS.dbf")
library(foreign)
# Read in ACS data and ma outcome data
acs = read.dbf("ACS_With_Tracts/Tracts_With_ACS.dbf")
View(acs)
Portland = read.csv("Port_final_results.csv")
Philly = read.csv("PhillyFedFinal_Results.csv")
sttle = read.csv("Seattle_final_results.csv")
LA = read.csv("LA_Final.csv")
Port_selec = select(Portland, GEOID10, Name, NeighTypol)
Philly_selec = select(Philly, GEOID10, Name, Type_Fin)
sttle_selec = select(sttle, GEOID10, Name, MEAN)
LA_selec = select(LA, GEOID10, FINAL_Z)
library(dplyr)
library(grid)
library(ggplot2)
library(ggpubr)
Port_selec = select(Portland, GEOID10, Name, NeighTypol)
Philly_selec = select(Philly, GEOID10, Name, Type_Fin)
sttle_selec = select(sttle, GEOID10, Name, MEAN)
LA_selec = select(LA, GEOID10, FINAL_Z)
sttle_selec$sttle_types = cut(sttle_selec$MEAN, c(0, 12.302785, 17.018825, 21.996102, 26.266226, 31.792477, 41.104703), labels = c("very low", "low", "low-moderate", "moderate", "moderate-high", "high"))
LA_selec$LA_types = cut(LA_selec$FINAL_Z, c(-2.3965, .16, .41, .71, 1.34, 2.50003), labels = c("Low", "Low Moderate", "Moderate", "Moderate-High", "High"))
LA_selec$LA_types[LA_selec$FINAL_Z == 0] == "Excluded"
View(LA_selec)
LA_selec$LA_types[LA_selec$FINAL_Z == 0] <- "Excluded"
LA_selec$LA_types[LA_selec$FINAL_Z == NA] <- "Excluded"
LA_selec$LA_types = cut(LA_selec$FINAL_Z, c(-2.3965, .16, .41, .71, 1.34, 2.50003), labels = c("Low", "Low Moderate", "Moderate", "Moderate-High", "High"))
LA_selec$LA_types = ifelse(LA_selec$FINAL_Z == 0, "Excluded", LA_selec$LA_types)
LA_selec$LA_types = cut(LA_selec$FINAL_Z, c(-2.3965, .16, .41, .71, 1.34, 2.50003), labels = c("Low", "Low Moderate", "Moderate", "Moderate-High", "High"))
LA_selec$LA_types[LA_selec$FINAL_Z == 0] <- "Excluded"
LA_selec$LA_types = cut(LA_selec$FINAL_Z, c(-2.3965, .16, .41, .71, 1.34, 2.50003), labels = c("Low", "Low Moderate", "Moderate", "Moderate-High", "High"))
str(LA_selec)
LA_selec$LA_types = as.character(LA_selec$LA_types)
LA_selec$LA_types[LA_selec$FINAL_Z == 0] <- "Excluded"
Port_selec = dplyr::rename(Port_selec, Port_type = NeighTypol)
Philly_selec = dplyr::rename(Philly_selec, Philly_type = Type_Fin)
Port_acs = merge(Port_selec, acs, by = "GEOID10")
Philly_acs = merge(Philly_selec, acs, by = "GEOID10")
sttle_acs = merge(sttle_selec, acs, by = "GEOID10")
LA_acs = merge(LA_selec, acs, by = "GEOID10")
Port_acs$gentrifying = ifelse(Port_acs$Port_type == "Continued Loss" | Port_acs$Port_type == "Dynamic" | Port_acs$Port_type == "Late" | Port_acs$Port_type == "Early: Type 1" | Port_acs$Port_type == "Early: Type 2", "Y", "N")
Philly_acs$gentrifying = ifelse(Philly_acs$Philly_type == "Continued Gentrification" | Philly_acs$Philly_type == "Intense Gentrification" | Philly_acs$Philly_type == "Moderate Gentrification", "Y", "N")
sttle_acs$gentrifying = cut(sttle_acs$MEAN, c(0, 17.018825, 50), labels = c("N", "Y"))
LA_acs$gentrifying = cut(LA_acs$FINAL_Z, c(-2.3965, .16, 2.50003), labels = c("N", "Y"))
Tot_NHw = sum(acs$NONHISWHIT)
Tot_noB = sum(acs$TOT_NOBACH)
tot_un2 = sum(acs$POV_UND_2)
#read in evictions data
evictions = read.dbf("BostonEvictions.dbf")
Tot_pop = sum(acs$TOT_POP)
Tot_wht = sum(acs$TOT_WHT)
Tot_blck = sum(acs$TOT_BLCK)
Tot_asia = sum(acs$TOT_ASIA)
Tot_hisp = sum(acs$TOT_HISP)
Tot_rent = sum(acs$POP_RENTER)
Tot_SF = sum(acs$AREA)
#select evictions variables
evic_selec = select(evictions, GEOID10, eviction_f, evictions)
tot_ev_f = sum(evic_selec$eviction_f)
tot_ev = sum(evic_selec$evictions)
Port_f = merge(Port_acs, evic_selec, by = "GEOID10")
Philly_f = merge(Philly_acs, evic_selec, by = "GEOID10")
Sttle_f = merge(sttle_acs, evic_selec, by = "GEOID10")
LA_f = merge(LA_acs, evic_selec, by = "GEOID10")
View(Port_f)
class(Port_f$Port_type)
#Convert NA values to strings that say "insufficient data"
Port_f$Port_type <- as.character(Port_f$Port_type)
Port_f$Port_type[is.na(Port_f$Port_type)] <- "insufficient data"
View(Philly_f)
Philly_f$Philly_type = as.character(Philly_f$Philly_type)
Philly_f$Philly_type[is.na(Philly_f$Philly_type)] = "insufficient data"
View(Sttle_f)
Port_f_Igrp = group_by(Port_f, gentrifying)
Philly_f_Igrp = group_by(Philly_f, gentrifying)
Sttle_f_Igrp = group_by(Sttle_f, gentrifying)
LA_f_Igrp = group_by(LA_f, gentrifying)
SumDemInc_port = summarize(Port_f_Igrp, count = n(), tot_pop_pct = (sum(TOT_POP)/Tot_pop) *100, NHwhite_pop_pct = (sum(NONHISWHIT)/Tot_NHw) *100, black_pop_pct = (sum(TOT_BLCK)/Tot_blck)*100, asian_pop_pct = (sum(TOT_ASIA)/Tot_asia)*100, hisp_pop_pct = (sum(TOT_HISP)/Tot_hisp)*100, noB_pct = (sum(TOT_NOBACH)/Tot_noB)*100, und2 = (sum(POV_UND_2)/tot_un2)*100, rent_pop_pct = (sum(POP_RENTER)/Tot_rent)*100, tot_evic_pct = (sum(evictions)/tot_ev)*100, tot_area_pct = (sum(AREA)/Tot_SF) *100)
SumDemInc_Philly = summarize(Philly_f_Igrp, count = n(), tot_pop_pct = (sum(TOT_POP)/Tot_pop) *100, NHwhite_pop_pct = (sum(NONHISWHIT)/Tot_NHw) *100, black_pop_pct = (sum(TOT_BLCK)/Tot_blck)*100, asian_pop_pct = (sum(TOT_ASIA)/Tot_asia)*100, hisp_pop_pct = (sum(TOT_HISP)/Tot_hisp)*100, noB_pct = (sum(TOT_NOBACH)/Tot_noB)*100, und2 = (sum(POV_UND_2)/tot_un2)*100, rent_pop_pct = (sum(POP_RENTER)/Tot_rent)*100, tot_evic_pct = (sum(evictions)/tot_ev)*100, tot_area_pct = (sum(AREA)/Tot_SF) *100)
SumDemInc_sttle = summarize(Sttle_f_Igrp, count = n(), tot_pop_pct = (sum(TOT_POP)/Tot_pop) *100, NHwhite_pop_pct = (sum(NONHISWHIT)/Tot_NHw) *100, black_pop_pct = (sum(TOT_BLCK)/Tot_blck)*100, asian_pop_pct = (sum(TOT_ASIA)/Tot_asia)*100, hisp_pop_pct = (sum(TOT_HISP)/Tot_hisp)*100, noB_pct = (sum(TOT_NOBACH)/Tot_noB)*100, und2 = (sum(POV_UND_2)/tot_un2)*100, rent_pop_pct = (sum(POP_RENTER)/Tot_rent)*100, tot_evic_pct = (sum(evictions)/tot_ev)*100, tot_area_pct = (sum(AREA)/Tot_SF) *100)
Sum_Dem_Inc_LA = dplyr::summarize(LA_f_Igrp, count = n(), tot_pop_pct = (sum(TOT_POP)/Tot_pop) *100, NHwhite_pop_pct = (sum(NONHISWHIT)/Tot_NHw) *100, black_pop_pct = (sum(TOT_BLCK)/Tot_blck)*100, asian_pop_pct = (sum(TOT_ASIA)/Tot_asia)*100, hisp_pop_pct = (sum(TOT_HISP)/Tot_hisp)*100, noB_pct = (sum(TOT_NOBACH)/Tot_noB)*100, und2 = (sum(POV_UND_2)/tot_un2)*100, rent_pop_pct = (sum(POP_RENTER)/Tot_rent)*100, tot_evic_pct = (sum(evictions)/tot_ev)*100, tot_area_pct = (sum(AREA)/Tot_SF) *100)
write.csv(SumDemInc_port, file = "Dem_comp_IncEx_Portland.csv")
write.csv(SumDemInc_Philly, file = "Dem_comp_IncEx_Philly.csv")
write.csv(SumDemInc_sttle, file = "Dem_comp_IncEx_sttle.csv")
write.csv(Sum_Dem_Inc_LA, file = "Dem_comp_IncEx_LA.csv")
#Assign numbered value for each category
##Philly
Philly_f$Philly_type2 = NA
levels(Philly_f$Philly_type)
levels(Philly_f$Philly_type)
levels(as.factor(Philly_f$Philly_type))
Philly_f$Philly_type2[Philly_f$Philly_type == "Continued Gentrification"] = "1 - Continued Gentrification"
Philly_f$Philly_type2[Philly_f$Philly_type == "Intense Gentrification"] = "2 - Intense Gentrification"
Philly_f$Philly_type2[Philly_f$Philly_type == "Moderate Gentrification"] = "3 - Moderate Gentrification"
Philly_f$Philly_type2[Philly_f$Philly_type == "Stalled Gentrification"] = "4 - Stalled Gentrification"
Philly_f$Philly_type2[Philly_f$Philly_type == "Nongentrifying"] = "5 - Nongentrifying"
Philly_f$Philly_type2[Philly_f$Philly_type == "Not Gentrifiable"] = "6 - Not Gentrifiable"
Philly_f$Philly_type2[Philly_f$Philly_type == "insufficient data"] = "7 - Missing Data"
Philly_f$Philly_type[Philly_f$TOT_POP < 30] = "Nonresidential (pop. < 30)"
Port_f$Port_type[Port_f$TOT_POP < 30] = "Nonresidential (pop. < 30)"
table(Port_f$Port_type)
Philly_f$Philly_type2[Philly_f$Philly_type == "Nonresidential (pop. < 30)"] = "7 - Nonresidential (Pop < 10)"
levels(as.factor(Port_f$Port_type))
Port_f$Port_type2 = NA
Port_f$Port_type2[Port_f$Port_type == "Continued Loss"] = "1 - Continued Loss"
Port_f$Port_type2[Port_f$Port_type == "Late"] = "2 - Late"
Port_f$Port_type2[Port_f$Port_type == "Dynamic"] = "3 - Dynamic"
Port_f$Port_type2[Port_f$Port_type == "Early: Type 2"] = "4 - Early: Type 2"
Port_f$Port_type2[Port_f$Port_type == "Early: Type 1"] = "5 - Early: Type 1"
Port_f$Port_type2[Port_f$Port_type == "Susceptible"] = "6 - Susceptible"
Port_f$Port_type2[Port_f$Port_type == "Not at Risk"] = "7 - Not at Risk"
Port_f$Port_type2[Port_f$Port_type == "Nonresidential (pop. < 30)"] = "8 - Nonresidential (pop. < 30)"
Port_f$Port_type2[Port_f$Port_type == "insufficient data"] = "9 - insufficient data"
levels(as.factor(LA_f$LA_types))
#LA
LA_f$LA_types2 = NA
LA_f$LA_types2[LA_f$LA_types == "High"] = "1 - High"
LA_f$LA_types2[LA_f$LA_types == "Moderate-High"] = "2 - Moderate-High"
LA_f$LA_types2[LA_f$LA_types == "Moderate"] = "3 - Moderate"
LA_f$LA_types2[LA_f$LA_types == "Low Moderate"] = "4 - Low-Moderate"
LA_f$LA_types2[LA_f$LA_types == "Low"] = "5 - Low"
LA_f$LA_types2[LA_f$LA_types == "Excluded"] = "5 - Excluded"
#Seattle
Sttle_f$sttle_type2 = NA
Sttle_f$sttle_type2[Sttle_f$sttle_types == "high"] = "1 - high"
Sttle_f$sttle_type2[Sttle_f$sttle_types == "moderate-high"] = "2 - moderate-high"
Sttle_f$sttle_type2[Sttle_f$sttle_types == "moderate"] = "3 - moderate"
Sttle_f$sttle_type2[Sttle_f$sttle_types == "low-moderate"] = "4 - low-moderate"
Sttle_f$sttle_type2[Sttle_f$sttle_types == "low"] = "5 - low"
Sttle_f$sttle_type2[Sttle_f$sttle_types == "very low"] = "6 - very low"
Port_Philly = merge(Port_f, Philly_f, by = "GEOID10")
Port_Sttle = merge(Port_f, Sttle_f, by = "GEOID10")
Philly_Sttle = merge(Philly_f, Sttle_f, by = "GEOID10")
Port_LA = merge(Port_f, LA_f, by = "GEOID10")
Philly_LA = merge(Philly_f, LA_f, by = "GEOID10")
Sttle_LA = merge(Sttle_f, LA_f, by = "GEOID10")
Port_Philly_xtab = xtabs(~Port_Philly$Port_type2 + Port_Philly$Philly_type2, addNA = T)
chisq.test(Port_Philly_xtab)
pptest = assocstats(Port_Philly_xtab)
Port_Sttle_xtab = xtabs(~Port_Sttle$Port_type2 + Port_Sttle$sttle_type2, addNA = T)
chisq.test(Port_Sttle_xtab)
Philly_Sttle_xtab = xtabs(~Philly_Sttle$Philly_type2 + Philly_Sttle$sttle_type2, addNA = T)
chisq.test(Philly_Sttle_xtab)
Port_LA_xtab = xtabs(~Port_LA$Port_type2 + Port_LA$LA_types2, addNA = T)
chisq.test(Port_LA_xtab)
Philly_LA_xtabs = xtabs(~Philly_LA$Philly_type2 + Philly_LA$LA_types2, addNA = T)
chisq.test(Philly_LA_xtabs)
Sttle_LA_xtab = xtabs(~Sttle_LA$sttle_type2 + Sttle_LA$LA_types2, addNA = T)
chisq.test(Sttle_LA_xtab)
Ptld_Phil2 = ggpar(Ptld_Phil, main = "Portland vs. Philadelphia", caption = "Portland typologies on x-axis, Philadelphia typologies on y-axis", legend = "none")
Ptld_Phil = ggballoonplot(as.data.frame(Port_Philly_xtab), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"))
Ptld_Phil2 = ggpar(Ptld_Phil, main = "Portland vs. Philadelphia", caption = "Portland typologies on x-axis, Philadelphia typologies on y-axis", legend = "none")
##Portland compared to Seattle
Ptld_Stle = ggballoonplot(as.data.frame(Port_Sttle_xtab), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"))
Ptld_Stle2 = ggpar(Ptld_Stle, main = "Portland vs. Seattle", caption = "Portland typologies on x-axis, Seattle risk scores on y-axis", legend = "none")
##Philly compared to Seattle
Phil_Stle = ggballoonplot(as.data.frame(Philly_Sttle_xtab), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"))
Phil_Stle2 = ggpar(Phil_Stle, main = "Philly vs. Seattle", caption = "Philadelphia typologies on x-axis, Seattle risk scores on y-axis")
#Portland vs. LA
Ptld_LA = ggballoonplot(as.data.frame(Port_LA_xtab), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"), title = "Portland vs. LA")
Ptld_LA2 = ggpar(Ptld_LA, main = "Portland vs. Los Angeles", caption = "Portland typologies on x-axis, Los Angeles risk scores on y-axis", legend = "none")
#Philly vs. LA
Philly_LA = ggballoonplot(as.data.frame(Philly_LA_xtabs), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"), title = "Philly vs. LA")
Philly_LA2 = ggpar(Philly_LA, main = "Philadelphia vs. Los Angeles", caption = "Philadelphia typologies on x-axis, Los Angeles risk scores on y-axis", legend = "none")
#Seattle vs. LA
Sttle_LA = ggballoonplot(as.data.frame(Sttle_LA_xtab), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"), title = "Seattle vs. LA")
Sttle_LA2 = ggpar(Sttle_LA, main = "Seattle vs. Los Angeles", caption = "Seattle risk scores on x-axis, Los Angeles risk scores on y-axis")
ggarrange(Ptld_Phil2, Ptld_Stle2, Phil_Stle2, Ptld_LA2, Philly_LA2, Sttle_LA2)
ggarrange(Ptld_Phil2, Ptld_Stle2, Phil_Stle2, Ptld_LA2, Philly_LA2, Sttle_LA2)
Port_f$Port_type2[Port_f$Port_type == "insufficient data" | Port_f$Port_type == "Nonresidential (pop. < 30)"] = "9 - Nonresidential/insufficient data"
Philly_f$Philly_type2[Philly_f$Philly_type == "Nonresidential (pop. < 30)" | Philly_f$Philly_type  == "Nonresidential (pop. < 30)"] = "7 - Nonresidential (Pop < 30)"
Port_Philly = merge(Port_f, Philly_f, by = "GEOID10")
Port_Sttle = merge(Port_f, Sttle_f, by = "GEOID10")
Philly_Sttle = merge(Philly_f, Sttle_f, by = "GEOID10")
Port_LA = merge(Port_f, LA_f, by = "GEOID10")
Philly_LA = merge(Philly_f, LA_f, by = "GEOID10")
Sttle_LA = merge(Sttle_f, LA_f, by = "GEOID10")
Port_Philly_xtab = xtabs(~Port_Philly$Port_type2 + Port_Philly$Philly_type2, addNA = T)
chisq.test(Port_Philly_xtab)
pptest = assocstats(Port_Philly_xtab)
Port_Sttle_xtab = xtabs(~Port_Sttle$Port_type2 + Port_Sttle$sttle_type2, addNA = T)
chisq.test(Port_Sttle_xtab)
Philly_Sttle_xtab = xtabs(~Philly_Sttle$Philly_type2 + Philly_Sttle$sttle_type2, addNA = T)
chisq.test(Philly_Sttle_xtab)
Port_LA_xtab = xtabs(~Port_LA$Port_type2 + Port_LA$LA_types2, addNA = T)
chisq.test(Port_LA_xtab)
Philly_LA_xtabs = xtabs(~Philly_LA$Philly_type2 + Philly_LA$LA_types2, addNA = T)
chisq.test(Philly_LA_xtabs)
Sttle_LA_xtab = xtabs(~Sttle_LA$sttle_type2 + Sttle_LA$LA_types2, addNA = T)
chisq.test(Sttle_LA_xtab)
#Create Balloon Graphics
##Portland compared to Philly
Ptld_Phil = ggballoonplot(as.data.frame(Port_Philly_xtab), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"))
Ptld_Phil2 = ggpar(Ptld_Phil, main = "Portland vs. Philadelphia", caption = "Portland typologies on x-axis, Philadelphia typologies on y-axis", legend = "none")
##Portland compared to Seattle
Ptld_Stle = ggballoonplot(as.data.frame(Port_Sttle_xtab), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"))
Ptld_Stle2 = ggpar(Ptld_Stle, main = "Portland vs. Seattle", caption = "Portland typologies on x-axis, Seattle risk scores on y-axis", legend = "none")
##Philly compared to Seattle
Phil_Stle = ggballoonplot(as.data.frame(Philly_Sttle_xtab), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"))
Phil_Stle2 = ggpar(Phil_Stle, main = "Philly vs. Seattle", caption = "Philadelphia typologies on x-axis, Seattle risk scores on y-axis")
#Portland vs. LA
Ptld_LA = ggballoonplot(as.data.frame(Port_LA_xtab), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"), title = "Portland vs. LA")
Ptld_LA2 = ggpar(Ptld_LA, main = "Portland vs. Los Angeles", caption = "Portland typologies on x-axis, Los Angeles risk scores on y-axis", legend = "none")
#Philly vs. LA
Philly_LA = ggballoonplot(as.data.frame(Philly_LA_xtabs), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"), title = "Philly vs. LA")
Philly_LA2 = ggpar(Philly_LA, main = "Philadelphia vs. Los Angeles", caption = "Philadelphia typologies on x-axis, Los Angeles risk scores on y-axis", legend = "none")
#Seattle vs. LA
Sttle_LA = ggballoonplot(as.data.frame(Sttle_LA_xtab), size.range = c(0,20), fill = "value", show.label = TRUE, font.label = c(14, "bold", "red"), title = "Seattle vs. LA")
Sttle_LA2 = ggpar(Sttle_LA, main = "Seattle vs. Los Angeles", caption = "Seattle risk scores on x-axis, Los Angeles risk scores on y-axis")
ggarrange(Ptld_Phil2, Ptld_Stle2, Phil_Stle2, Ptld_LA2, Philly_LA2, Sttle_LA2)
setwd("/Users/abob/Desktop/github/big-data-spring2018/transit_delays/gtfs_scrape")
stops = read.csv(stops.txt)
stops = read.csv(stops.csv)
stops = read.csv("stops.csv")
s_t = read.csv("source_target.csv")
View(stops)
View(s_t)
s_stops = merge(s_t, stops, by.x = "from_stop", by.y = "stop_id")
View(s_stops)
?select
attach(iris)
View(iris)
s_stops = select(s_stops, from_stop, to_stop, from.stop.code = stop_code, from.stop.name = stop_name, from.stop.desc = stop_desc, from.parent.stat = parent_station)
st_stops = merge(s_stops, stops, by.x = "to_stops", by.y = "stop_id")
st_stops = merge(s_stops, stops, by.x = "to_stop", by.y = "stop_id")
st_stops = select(st_stops, from_stop, to_stop, from.stop.code, from.stop.name, from.stop.desc, from.parent.stat, to.stop.code = stop_code, to.stop.name = stop_name, to.stop.desc = stop_desc, to.parent.stat = parent_station)
View(st_stops)
s_t = read.csv("to_from.csv")
colnames(s_t)
s_stops = merge(s_t, stops, by.x = "from_stop", by.y = "stop_id")
s_stops = select(s_stops, from_stop, to_stop, from.stop.code = stop_code, from.stop.name = stop_name, from.stop.desc = stop_desc, from.parent.stat = parent_station)
st_stops = merge(s_stops, stops, by.x = "to_stop", by.y = "stop_id")
st_stops = select(st_stops, from_stop, to_stop, from.stop.code, from.stop.name, from.stop.desc, from.parent.stat, to.stop.code = stop_code, to.stop.name = stop_name, to.stop.desc = stop_desc, to.parent.stat = parent_station)
write.csv(st_stops, file = "Mbta_stat_links.csv")
mbta_perf = read.csv("mbta_perf_v3.csv")
summary(mbta_perf
)
dim(mbta_perf)
length(unique(mbta_perf$dest_name))
length(unique(mbta_perf$origin_name))
perf2 = read.csv("mbta_perf_v2.csv")
dim(perf2)
View(mbta_perf)
levels(as.factor(mbta_perf$route_id))
levels(as.factor(mbta_perf$benchmark_travel_time_sec))
#Convert to percent of benchmark
new_perf = subset(mbta_perf, benchmark_travel_time_sec > 0)
9/10
new_perf$pct_of_benchmark = new_perf$travel_time_sec/new_perf$benchmark_travel_time_sec
View(new_perf)
library(chron)
install.packages("chron")
library(chron)
?chron
vignette(chron)
vignettes(chron())
vignette(chron)
new_perf$datetime = as.POSIXct(as.numeric(new_perf$dep_dt), origin = '1970-01-01', tz = 'EST')
?hist
hist(new_perf$datetime)
hist(new_perf$datetime, breaks = "Sturges")
new_perf$dep_time_by15 = cut(new_perf$datetime, breaks="15 min")
mbta_per = subset(new_perf, datetime > "12-28-17 01:46:00")
mbta_per = subset(new_perf, datetime > as.POSIXct("12-28-17 01:46:00")
View(mbta_per)
mbta_per = subset(new_perf, datetime > as.POSIXct("12-28-17 01:46:00"))
mbta_per = subset(new_perf, datetime > as.POSIXct("2017-12-28 01:46:00"))
View(mbta_per)
new_perf$dep_time_by15 = cut(new_perf$datetime, breaks="15 min")
#Convert to percent of benchmark
new_perf = subset(mbta_perf, benchmark_travel_time_sec > 0)
new_perf$pct_of_benchmark = new_perf$travel_time_sec/new_perf$benchmark_travel_time_sec
new_perf$datetime = as.POSIXct(as.numeric(new_perf$dep_dt), origin = '1970-01-01', tz = 'EST')
mbta_per = subset(new_perf, datetime > as.POSIXct("2017-12-28 01:46:00"))
new_perf$dep_time_by15 = cut(new_perf$datetime, breaks="15 min")
mbta_per$dep_time_by15 = cut(mbta_per$datetime, breaks="15 min")
?group_by
?group_by_
avg_pct_benchmark = mbta_per %>%
group_by_(.dots=c("route_id","dep_time_by15")) %>%
summarize(avg_pct_benchmark=mean(pct_of_benchmark))
avg_pct_benchmark
View(avg_pct_benchmark)
24/0.25x
24/0.25
96*7
write.csv(avg_pct_benchmark, file = "avg_pct_benchmark.csv")
